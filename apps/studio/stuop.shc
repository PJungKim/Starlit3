/**

**************Starlight 3.0**************
*										*
*	STarlight Universal OPerators		*
*										*
*	STUOP.shc							*
*										*
*	2023. 04. 01						*
*	Maded Bi P. J. Kim					*
*										*
*										*
*	Starlight,							*
*	Virtual Machine in					*
*	Embedded System						*
*										*
*	**Starlight OOP Center**			*
*										*
*****************************************

**/




///Single Term Operators

///Logical Not
$const($not$int,			0x00010010,		ref,	int		);
$const($not$int64,			0x00011010,		ref,	int		);

///Bitwise Not
$const($bnot$int,			0x00020010,		ref,	int		);
$const($bnot$int64,			0x00021010,		ref,	int64	);

///Minus
$const($minus$int,			0x00030010,		ref,	int		);
$const($minus$int64,		0x00031010,		ref,	int64	);
$const($minus$float,		0x00032010,		ref,	float	);

///Boolean
$const(Bool$int,			0x00040010,		ref,	int		);
$const(Bool$int64,			0x00041010,		ref,	int		);

///Casting
$const(int$float,			0x00050010,		ref,	int		);
$const(int64$float,			0x00051010,		ref,	int64	);
///부호 문제 때문에 int를 int64로 변환하는 기능은 오버로드(반대는 추가 안함.)
$const(int64$int,			0x00052010,		ref,	int64	);
$const(float$int,			0x00053010,		ref,	float	);
$const(float$int64,			0x00054010,		ref,	float	);

///Ref
$const(val$ref,				0x00093010,		ref,	int		);
$const(int$ref,				0x00090010,		ref,	int		);
$const(int64$ref,			0x00091010,		ref,	int64	);
$const(float$ref,			0x00092010,		ref,	float	);

///Double Term Operators
///Multiply
$const($mul$int$int,		0x01010010,		ref,	int		);
$const($mul$int64$int64,	0x01011010,		ref,	int64	);
$const($mul$float$float,	0x01012010,		ref,	float	);

///Exponential
$const($exp$int$int,		0x0101A010,		ref,	int		);
$const($exp$int64$int64,	0x0101B010,		ref,	int64	);
$const($exp$float$float,	0x0101C010,		ref,	float	);

///Division
$const($div$int$int,		0x01020010,		ref,	int		);
$const($div$int64$int64,	0x01021010,		ref,	int64	);
$const($div$float$float,	0x01022010,		ref,	float	);

///Modular
$const($mod$int$int,		0x01025010,		ref,	int		);
$const($mod$int64$int64,	0x01026010,		ref,	int64	);

///Addition
$const($add$int$int,		0x01030010,		ref,	int		);
$const($add$ref$int,		0x01030010,		ref,	ref		);
$const($add$int64$int64,	0x01031010,		ref,	int64	);
$const($add$float$float,	0x01032010,		ref,	float	);

///Substitution
$const($sub$int$int,		0x01040010,		ref,	int		);
$const($sub$ref$int,		0x01040010,		ref,	ref		);
$const($sub$int64$int64,	0x01041010,		ref,	int64	);
$const($sub$float$float,	0x01042010,		ref,	float	);
$const($sub$ref$ref,        0x01040010,     ref,    int     );

///Shift
$const($shl$int$int,		0x01050010,		ref,	int		);
$const($shl$int64$int64,	0x01051010,		ref,	int64	);
$const($shr$int$int,		0x01052010,		ref,	int		);
$const($shr$int64$int64,	0x01053010,		ref,	int64	);
$const($shr2$int$int,		0x01054010,		ref,	int		);
$const($shr2$int64$int64,	0x01055010,		ref,	int64	);

///comparision
$const($lt$int$int,			0x01060010,		ref,	int		);
$const($lt$int64$int64,		0x01061010,		ref,	int		);
$const($lt$float$float,		0x01062010,		ref,	int		);
$const($le$int$int,			0x010B0010,		ref,	int		);
$const($le$int64$int64,		0x010B1010,		ref,	int		);
$const($le$float$float,		0x010B2010,		ref,	int		);
$const($bt$int$int,			0x010C0010,		ref,	int		);
$const($bt$int64$int64,		0x010C1010,		ref,	int		);
$const($bt$float$float,		0x010C2010,		ref,	int		);
$const($be$int$int,			0x010D0010,		ref,	int		);
$const($be$int64$int64,		0x010D1010,		ref,	int		);
$const($be$float$float,		0x010D2010,		ref,	int		);

$const($eq$int$int,			0x01063010,		ref,	int		);
$const($eq$int64$int64,		0x01064010,		ref,	int64	);
$const($eq$float$float,		0x01065010,		ref,	float	);
$const($ne$int$int,			0x010B3010,		ref,	int		);
$const($ne$int64$int64,		0x010B4010,		ref,	int64	);
$const($ne$float$float,		0x010B5010,		ref,	float	);

///Bitwise Operators
$const($band$int$int,		0x01070010,		ref,	int		);
$const($band$int64$int64,	0x01071010,		ref,	int64	);
$const($bor$int$int,		0x01072010,		ref,	int		);
$const($bor$int64$int64,	0x01073010,		ref,	int64	);
$const($bxor$int$int,		0x01074010,		ref,	int		);
$const($bxor$int64$int64,	0x01075010,		ref,	int64	);


///Logical Operators
$const($and$int$int,		0x01080010,		ref,	int		);
$const($or$int$int,			0x01081010,		ref,	int		);

