///Starlit Universal Gauge
///For Car Driving

///This library is based on complex library.
///Please do not use j as an index of loop.
///$import(complex);
$import(oled);
$import(math);


///Gauge Class
$class(gauge_t){
	#oled:_OLED_t;
	#centerX:float;
	#centerY:float;
	#isNotHalf:int;
	#length:float;
	
	#maxVal:float;
	#curVal__:float;
	
	Init(OLED:_OLED_t, maximum:float){
		self.oled_ = OLED_;
		self.centerX = self.oled.width / 2;
		self.centerY = self.oled.height / 2;
		self.isNotHalf = 1;
		self.length = self.oled.width / 4;
		self.maxVal = maximum;
	}
		
	Init(OLED:_OLED_t, len:float, maximum:float){
		self.oled_ = OLED_;
		self.centerX = self.oled.width / 2;
		self.centerY = self.oled.height / 2;
		self.isNotHalf = 1;
		self.length = len;
		self.maxVal = maximum;
	}
	
	
	
	PrintGrid(radi:float, len:float, num:int) color(col:int){
		#i():int;
		#d():float;
		for (i) from (0) to (num - self.isNotHalf){
			d = PI * (self.isNotHalf + 1) / num * i;
			self.oled.Line(self.centerX - cos(d) * radi,
			          self.centerY - sin(d) * radi,
			          self.centerX - cos(d) * (radi + len),
			          self.centerY - sin(d) * (radi + len), col);
		}
	}
	
	PrintGrid(len:float, num:int) color(col:int){
		self.PrintGrid(self.length + 2, len, num) color(col);
	}
	
	Print(value:float)color(col:int){
		#d():float;
		///First, Erase the previous line.
		d = PI * (self.isNotHalf + 1) * self.curVal__ / self.maxVal;
		self.oled.Line(self.centerX, self.centerY, self.centerX - cos(d) * self.length, 
		    self.centerY - sin(d) * self.length, self.oled.bgColor);
		self.curVal__ = value;
		d = PI * (self.isNotHalf + 1) * self.curVal__ / self.maxVal;
		self.oled.Line(self.centerX, self.centerY, self.centerX - cos(d) * self.length, 
		    self.centerY - sin(d) * self.length, col);
	}
}

GAUGE(OLED:_OLED_t, len:float, maximum:float):gauge_t{
    #gauge():gauge_t;
    gauge.Init(OLED, len, maximum);
    return(gauge);
}

GAUGE(OLED:_OLED_t, center:complex_t, len:float, maximum:float):gauge_t{
    #gauge():gauge_t;
    gauge.oled_ = OLED_;
    gauge.centerX = center.re;
    gauge.centerY = center.im;
    gauge.isNotHalf = 1;
    gauge.length = len;
    gauge.maxVal = maximum;
    gauge.curVal__ = 0.0;
    return(gauge);
}
