/**

**************Starlight 3.0**************
*										*
*	Graph Module						*
*										*
*	Graph.shc							*
*										*
*	2023. 04. 01						*
*	Maded Bi P. J. Kim					*
*										*
*										*
*	Starlight,							*
*	Virtual Machine in					*
*	Embedded System						*
*										*
*	**Starlight OOP Center**			*
*   KONKUK University					*
*										*
*****************************************

**/





$import(oled);
$import(complex);

$class(graph_t){
    #oled:_OLED_t;
    #origin:complex_t;
    #scale:complex_t;
    #points:complex_t[100];
    #idx:int;
    #interval:float;
    
    Init(OLED:_OLED_t, origin:complex_t, scale:complex_t){
        self.oled_ = OLED_;
        self.origin = origin;
        self.scale = scale;
    }
    
    SetPoints(func:ref, xi:float, xe:float, h:float){
        #i(0):int;
        while(xi + i * h <= xe){
            self.points[i].re = xi + i * h;
            self.points[i].im = float(func(self.points[i].re));
            i += 1;
        }
        self.idx = i;
    }
    
    Semilogx(func:ref, xi:float, xe:float, h:float){
        #i(0):int;
        while(xi + i * h <= xe){
            self.points[i].re = xi + i * h;
            self.points[i].im = float(func(10 ^^ self.points[i].re));
            i += 1;
        }
        self.idx = i;
    }
    
    Bode(func:ref, xi:float, xe:float, h:float){
        #i(0):int;
        while(xi + i * h <= xe){
            self.points[i].re = xi + i * h;
            self.points[i].im = log10(abs(complex_t(func(j * 10 ^^ self.points[i].re)))) * 20;
            i += 1;
        }
        self.idx = i;
    }
    
    CopyData(arr:ref, size:int){
        #i(0):int;
        for(i = 0, i < size, i+=1){
            self.points[i].re = i;
            self.points[i].im = float(arr)[i];
        }
        self.idx = i;
    }
    
    
    Print(color:int){
        #i():int;
        for(i)from(1)to(self.idx-1){
            self.oled.GLine(self.origin.re + self.points[i-1].re / self.scale.re,
                           self.origin.im - self.points[i-1].im / self.scale.im, 
                           self.origin.re + self.points[i].re / self.scale.re, 
                           self.origin.im - self.points[i].im / self.scale.im, color);
        }
    }
    
    ///아래 Axis는 원점 기준으로 표시됩니다.
    ///Value 표시는 눈금 간격만 표시합니다.
    PrintAxis(color:int){
        ///Axis 표시. - x축, y축
        self.oled.Line(0, self.origin.im, self.oled.width - 1, self.origin.im, color);
        self.oled.Line(self.origin.re, 0, self.origin.re, self.oled.height - 1, color);
    }
    
    
    PrintGrid(color:int, h2:complex_t, txtfmt1:ref, txtfmt2:ref){
        self.PrintGrid(color, h2, txtfmt1, txtfmt2, 0);
    }
    ///아래는 Grid입니다.
    PrintGrid(color:int, h2:complex_t, txtfmt1:ref, txtfmt2:ref, logScale:int){
        #i():int;
        for(i = 0, self.origin.re + i * h2.re / self.scale.re < self.oled.width - 1, i+=1){
            self.oled.Line(self.origin.re + i * h2.re / self.scale.re, 0,
                           self.origin.re + i * h2.re / self.scale.re, self.oled.height - 1, color);
            if(val(txtfmt1)){
                self.oled.cursorX = self.origin.re + i * h2.re / self.scale.re + 2;
                self.oled.cursorY = self.oled.height - 9;
                if(logScale & 0x01){self.oled.Printf(txtfmt1, 10 ^^ (i * h2.re));}
                else{self.oled.Printf(txtfmt1, i * h2.re);}
            }
        }
        for(i = (-1), self.origin.re + i * h2.re / self.scale.re > 0.0, i-=1){
            self.oled.Line(self.origin.re + i * h2.re / self.scale.re, 0,
                           self.origin.re + i * h2.re / self.scale.re, self.oled.height - 1, color);
            if(val(txtfmt1)){
                self.oled.cursorX = self.origin.re + i * h2.re / self.scale.re + 2;
                self.oled.cursorY = self.oled.height - 9;
                if(logScale & 0x01){self.oled.Printf(txtfmt1, 10 ^^ (i * h2.re));}
                else{self.oled.Printf(txtfmt1, i * h2.re);}
            }
        }
        
        for(i = 0, self.origin.im - i * h2.im / self.scale.im > 0.0, i+=1){
            self.oled.Line(0, self.origin.im - i * h2.im / self.scale.im,
                           self.oled.width, self.origin.im - i * h2.im / self.scale.im, color);
            if(val(txtfmt2)){
                self.oled.cursorX = 1;
                self.oled.cursorY = self.origin.im - i * h2.im / self.scale.im + 2;
                self.oled.Printf(txtfmt2, i * h2.im);
            }
        }
        for(i = (-1), self.origin.im - i * h2.im / self.scale.im < self.oled.height, i-=1){
            self.oled.Line(0, self.origin.im - i * h2.im / self.scale.im,
                           self.oled.width, self.origin.im - i * h2.im / self.scale.im, color);
            if(val(txtfmt2)){
                self.oled.cursorX = 1;
                self.oled.cursorY = self.origin.im - i * h2.im / self.scale.im + 2;
                self.oled.Printf(txtfmt2, i * h2.im);
            }
        }
        
        
        
    }
    
}

GRAPH(OLED:_OLED_t, origin:complex_t, scale:complex_t):graph_t{
    #gr():graph_t;
    gr.Init(OLED, origin, scale);
    return(gr);
}
